import datetime
import socket
import struct
import time


from time import gmtime,strftime

fmt = "%Y-%m-%d %H:%M:%S"

TCP_IP = '192.168.168.11'
TCP_PORT = 6102
BUFFER_SIZE = 2048

def pop_string(data,length):
    popped = data[:length]
    data = data[length:]
    return popped

def parse_string(data,length,content):

    result=pop_string(data,length)
    val = int(str(result), 16)
    #print("{} is {}".format(content,val))
    data = data[length:]

    ret = (data,val)
    return ret

def process_data(data):

    paramdict = {1:"DigitalInputStatus1",2:"DigitalInputStatus2",3:"DigitalInputStatus3",4:"DigitalInputStatus4",9:"AnalogInput1",10:"AnalogInput2",21:"GSMlevel",24:"Speed",66:"ExternalPowerVoltage",67:"BatteryVoltage",68:"BatteryCurrent",69:"GNSSStatus",72:"DallasTemperature1",73:"DallasTemperature2",74:"DallasTemperature3",75:"DallasTemperatureSensorID1",76:"DallasTemperatureSensorID2",77:"DallasTemperatureSensorID3",78:"iButtonID",79:"Networktype",80:"WorkingMode",99:"Continuousodometer",179:"DigitalOutput1state",180:"DigitalOutput2state",181:"PDOP",182:"HDOP",199:"OdometerValue(VirtualOdometer)",200:"DeepSleep",205:"CellID",206:"AreaCode",239:"Ignition",240:"MovementSensor",241:"GSMOperatorCode",155:"Geofence zone 01",156:"Geofence zone 02",157:"Geofence zone 03",158:"Geofence zone 04",159:"Geofence zone 05",175:"Auto Geofence",177:"Idling",249:"Jamming detection",250:"Trip",251:"Immobilizer",252:"Authorized driving",253:"Green driving type",254:"Green driving value",255:"Over Speeding"}

    #additional for FM63
    paramdict.update({219:"(MSB)CCID",220:"CCID",221:"(LSB)CCID",62:"DallasTemperatureID1",63:"DallasTemperatureID2",64:"DallasTemperatureID3",65:"DallasTemperatureID4",216:"TotalOdometer",218:"IMSI",22:"ActualProfile",71:"GNSSStatus",178:"NetworkType",236:"X-axis",237:"Y-axis",238:"Z-axis"})

    if (len(data)>34):
        print ("{} received data:  {}".format(strftime("%Y-%m-%d %H:%M:%S", gmtime()),data))
        print((len(data)/2))

        # drop first 16 chars (8 bytes)
        #result=pop_string(data,16)
        #print(result)
        data = data[16:]

        #codec
        result=pop_string(data,2)
        print("Codec is {}".format(int(result, 16)))
        data = data[2:]

        #avl data count
        count=pop_string(data,2)
        print("AVL data count is {}".format(int(count, 16)))
        data = data[2:]

        for i in range(0,int(count, 16)):

            # timestamp
            result=pop_string(data,16)
            epochtime =int(result, 16)

            t = datetime.datetime.fromtimestamp(float(epochtime)/1000.)
            print("Epoch is {} Timestampt is  {}".format(epochtime,t.strftime(fmt))) # prints 2012-08-28 02:45:17
            data = data[16:]

            result=pop_string(data,2)
            print("Priority is {}".format(int(result, 16)))
            data = data[2:]

            result=pop_string(data,30)
            print("GPS is {}".format(int(result, 30)))
            data = data[30:]

            data,value=parse_string(data,2,"Event ID")
            print( "The event id {} was generated by {}".format(value,paramdict.get(value)))


            data,value=parse_string(data,2,"Element Count")
            print("Element Count is {}".format(value))


            data,value=parse_string(data,2,"1Byte element count")
            print( " Total 1 byte elements are {}".format(value))
            for i in range(1,value+1):
                data,value1=parse_string(data,2,"ID")
                data,value=parse_string(data,2,"value")
                if value1 in paramdict:
                    print( " the {} id is {} with value {}".format(i,paramdict.get(value1),value))
                else:
                     print( " the {} id is {} with value {}".format(i,value1,value))

            data,value=parse_string(data,2,"2Byte element count")
            print( " Total 2 byte elements are {}".format(value))
            for i in range(1,value+1):
                data,value1=parse_string(data,2,"ID")
                data,value=parse_string(data,4,"value")
                if value1 in paramdict:
                    print( " the {} id is {} with value {}".format(i,paramdict.get(value1),value))
                else:
                     print( " the {} id is {} with value {}".format(i,value1,value))

            data,value=parse_string(data,2,"4Byte element count")
            print( " Total 4 byte elements are {}".format(value))
            for i in range(1,value+1):
                data,value1=parse_string(data,2,"ID")
                data,value=parse_string(data,8,"value")
                if value1 in paramdict:
                    print( " the {} id is {} with value {}".format(i,paramdict.get(value1),value))
                else:
                     print( " the {} id is {} with value {}".format(i,value1,value))

            data,value=parse_string(data,2,"8Byte element count")
            print( " Total 4 byte elements are {}".format(value))
            for i in range(1,value+1):
                data,value1=parse_string(data,2,"ID")
                data,value=parse_string(data,16,"value")
                if value1 in paramdict:
                    print( " the {} id is {} with value {}".format(i,paramdict.get(value1),value))
                else:
                     print( " the {} id is {} with value {}".format(i,value1,value))

        data,value=parse_string(data,2,"AVL Data count")
        print( " AVL Data count {}".format(value))

        data,value=parse_string(data,8,"CRC ")
        print( " CRC {}".format(value))




        return (int(count, 16))
    else:
        return 0

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((TCP_IP, TCP_PORT))
while 1:
    s.listen(1)
    conn, addr = s.accept()
    print ('Connection address:', addr)
    print (conn)
    while 1:
        data = conn.recv(BUFFER_SIZE)
        if data:

            print(data)
            print(data.hex())
            response = process_data(data.hex())
            if response == 0:
                packet = struct.pack('1B', 1)
                print(packet)
                conn.send(packet)
            else:
                packet = struct.pack('I',response)
                print(response.to_bytes(4,byteorder="big"))
                conn.send(response.to_bytes(4,byteorder="big"))

        else:
            conn.close()
            print("Connection closed")
            break
